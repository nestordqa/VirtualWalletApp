/**
 * @file authSlice.ts
 * @description This file defines the Redux slice for authentication state, including actions
 *              for login, logout, and updating user balance.
 * @module authSlice
 */

import { createSlice, PayloadAction } from '@reduxjs/toolkit';

/**
 * @interface AuthState
 * @description Interface defining the structure of the authentication state.
 * @property {string | null} jwt - The JSON Web Token (JWT) for authentication.
 * @property {User | null} user - The user object.
 * @property {boolean} isAuthenticated - Indicates whether the user is authenticated.
 * @property {boolean} loading - Indicates whether an authentication process is in progress.
 * @property {any} error - Any error that occurred during authentication.
 */
interface AuthState {
    jwt: string | null;
    user: User | null;
    isAuthenticated: boolean;
    loading: boolean;
    error: any;
}

/**
 * @const initialState
 * @description The initial state for the authentication slice.
 */
const initialState: AuthState = {
    jwt: null,
    user: null,
    loading: false,
    error: null,
    isAuthenticated: false,
};

/**
 * @const authSlice
 * @description Creates a Redux slice for managing authentication state.
 */
const authSlice = createSlice({
    name: 'auth',
    initialState,
    reducers: {
        /**
         * @function loginSuccess
         * @description Reducer for handling a successful login.
         * @param {AuthState} state - The current authentication state.
         * @param {PayloadAction<{ jwt: string; user: User }>} action - The action payload containing the JWT and user.
         */
        loginSuccess: (state, action: PayloadAction<{ jwt: string; user: User }>) => {
            state.jwt = action.payload.jwt;
            state.user = action.payload.user;
            state.isAuthenticated = true;
        },
        /**
         * @function logout
         * @description Reducer for handling logout.
         * @param {AuthState} state - The current authentication state.
         */
        logout: (state) => {
            state.jwt = null;
            state.user = null;
            state.isAuthenticated = false;
        },
        /**
         * @function updateUserBalance
         * @description Reducer for updating the user's balance.
         * @param {AuthState} state - The current authentication state.
         * @param {PayloadAction<number>} action - The action payload containing the new balance.
         */
        updateUserBalance: (state, action: PayloadAction<number>) => {
            if (state.user) {
                state.user.balance = action.payload;
            }
        },
    },
});

/**
 * @exports actions
 * @description Exports the action creators generated by the slice.
 */
export const { loginSuccess, logout, updateUserBalance } = authSlice.actions;

/**
 * @exports reducer
 * @description Exports the reducer function for the authentication slice.
 */
export default authSlice.reducer;
