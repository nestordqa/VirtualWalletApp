/**
 * @file userSlice.ts
 * @description This file defines the Redux slice for managing user-related state, including actions
 *              for setting the current user, updating the list of users, and managing loading and error states.
 * @module userSlice
 */

import { createSlice, PayloadAction } from '@reduxjs/toolkit';

/**
 * @interface UserState
 * @description Interface defining the structure of the user state.
 * @property {User | null} currentUser - The currently logged-in user.
 * @property {User[]} users - An array of user objects.
 * @property {boolean} loading - Indicates whether user data is being loaded.
 * @property {string | null} error - Any error that occurred while loading user data.
 */
interface UserState {
    currentUser: User | null;
    users: User[];
    loading: boolean;
    error: string | null;
}

/**
 * @const initialState
 * @description The initial state for the user slice.
 */
const initialState: UserState = {
    currentUser: null,
    users: [],
    loading: false,
    error: null,
};

/**
 * @const userSlice
 * @description Creates a Redux slice for managing user-related state.
 */
const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
        /**
         * @function setCurrentUser
         * @description Reducer for setting the current user.
         * @param {UserState} state - The current user state.
         * @param {PayloadAction<User>} action - The action payload containing the user object.
         */
        setCurrentUser: (state, action: PayloadAction<User>) => {
            state.currentUser = action.payload;
        },
        /**
         * @function setUsers
         * @description Reducer for setting the list of users.
         * @param {UserState} state - The current user state.
         * @param {PayloadAction<User[]>} action - The action payload containing the array of user objects.
         */
        setUsers: (state, action: PayloadAction<User[]>) => {
            state.users = action.payload;
        },
        /**
         * @function setLoading
         * @description Reducer for setting the loading state.
         * @param {UserState} state - The current user state.
         * @param {PayloadAction<boolean>} action - The action payload containing the loading state.
         */
        setLoading: (state, action: PayloadAction<boolean>) => {
            state.loading = action.payload;
        },
        /**
         * @function setError
         * @description Reducer for setting the error state.
         * @param {UserState} state - The current user state.
         * @param {PayloadAction<string | null>} action - The action payload containing the error message.
         */
        setError: (state, action: PayloadAction<string | null>) => {
            state.error = action.payload;
        },
    },
});

/**
 * @exports actions
 * @description Exports the action creators generated by the slice.
 */
export const { setCurrentUser, setUsers, setLoading, setError } = userSlice.actions;

/**
 * @exports userReducer
 * @description Exports the reducer function for the user slice.
 */
export const userReducer = userSlice.reducer;
