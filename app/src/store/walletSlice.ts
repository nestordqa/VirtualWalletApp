/**
 * @file walletSlice.ts
 * @description This file defines the Redux slice for managing wallet-related state, including actions
 *              for adding balance, transferring balance, and managing loading and error states.
 * @module walletSlice
 */

import { createSlice, PayloadAction } from '@reduxjs/toolkit';

/**
 * @interface Transaction
 * @description Interface defining the structure of a transaction object.
 * @property {string} id - The unique identifier for the transaction.
 * @property {number} amount - The amount of the transaction.
 * @property {string} description - A description of the transaction.
 * @property {Date} date - The date of the transaction.
 */
interface Transaction {
    id: string;
    amount: number;
    description: string;
    date: Date;
}

/**
 * @interface WalletState
 * @description Interface defining the structure of the wallet state.
 * @property {number} balance - The current balance of the wallet.
 * @property {Transaction[]} transactions - An array of transaction objects.
 * @property {boolean} loading - Indicates whether wallet data is being loaded.
 * @property {string | null} error - Any error that occurred while loading wallet data.
 */
interface WalletState {
    balance: number;
    transactions: Transaction[];
    loading: boolean;
    error: string | null;
}

/**
 * @const initialState
 * @description The initial state for the wallet slice.
 */
const initialState: WalletState = {
    balance: 0,
    transactions: [],
    loading: false,
    error: null,
};

/**
 * @const walletSlice
 * @description Creates a Redux slice for managing wallet-related state.
 */
const walletSlice = createSlice({
    name: 'wallet',
    initialState,
    reducers: {
        /**
         * @function addBalance
         * @description Reducer for adding balance to the wallet.
         * @param {WalletState} state - The current wallet state.
         * @param {PayloadAction<number>} action - The action payload containing the amount to add.
         */
        addBalance: (state, action: PayloadAction<number>) => {
            state.balance += action.payload;
        },
        /**
         * @function transferBalance
         * @description Reducer for transferring balance from the wallet.
         * @param {WalletState} state - The current wallet state.
         * @param {PayloadAction<Transaction>} action - The action payload containing the transaction object.
         */
        transferBalance: (state, action: PayloadAction<Transaction>) => {
            state.balance -= action.payload.amount;
            state.transactions.push(action.payload);
        },
        /**
         * @function setLoading
         * @description Reducer for setting the loading state.
         * @param {WalletState} state - The current wallet state.
         * @param {PayloadAction<boolean>} action - The action payload containing the loading state.
         */
        setLoading: (state, action: PayloadAction<boolean>) => {
            state.loading = action.payload;
        },
        /**
         * @function setError
         * @description Reducer for setting the error state.
         * @param {WalletState} state - The current wallet state.
         * @param {PayloadAction<string | null>} action - The action payload containing the error message.
         */
        setError: (state, action: PayloadAction<string | null>) => {
            state.error = action.payload;
        },
    },
});

/**
 * @exports actions
 * @description Exports the action creators generated by the slice.
 */
export const { addBalance, transferBalance, setLoading, setError } = walletSlice.actions;

/**
 * @exports walletReducer
 * @description Exports the reducer function for the wallet slice.
 */
export const walletReducer = walletSlice.reducer;
